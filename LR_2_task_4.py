{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMn2heTH1kST06jECrfwnQN"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uo0DLUHdGxAk","executionInfo":{"status":"ok","timestamp":1734796168172,"user_tz":-120,"elapsed":30820,"user":{"displayName":"Ярослав Білотіл","userId":"06797585363548962278"}},"outputId":"1d3bbe1b-b039-4912-dda6-47cb6cb2f422"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: Logistic Regression\n","Accuracy: 0.8230\n","Precision: 0.7442\n","Recall: 0.4601\n","F1-Score: 0.5687\n","Classification Report: \n","              precision    recall  f1-score   support\n","\n","           0       0.84      0.95      0.89      4503\n","           1       0.74      0.46      0.57      1530\n","\n","    accuracy                           0.82      6033\n","   macro avg       0.79      0.70      0.73      6033\n","weighted avg       0.81      0.82      0.81      6033\n","\n","\n","Model: LDA\n","Accuracy: 0.8140\n","Precision: 0.7372\n","Recall: 0.4144\n","F1-Score: 0.5305\n","Classification Report: \n","              precision    recall  f1-score   support\n","\n","           0       0.83      0.95      0.88      4503\n","           1       0.74      0.41      0.53      1530\n","\n","    accuracy                           0.81      6033\n","   macro avg       0.78      0.68      0.71      6033\n","weighted avg       0.80      0.81      0.79      6033\n","\n","\n","Model: KNN\n","Accuracy: 0.8251\n","Precision: 0.6761\n","Recall: 0.5961\n","F1-Score: 0.6336\n","Classification Report: \n","              precision    recall  f1-score   support\n","\n","           0       0.87      0.90      0.89      4503\n","           1       0.68      0.60      0.63      1530\n","\n","    accuracy                           0.83      6033\n","   macro avg       0.77      0.75      0.76      6033\n","weighted avg       0.82      0.83      0.82      6033\n","\n","\n","Model: CART\n","Accuracy: 0.8110\n","Precision: 0.6268\n","Recall: 0.6301\n","F1-Score: 0.6284\n","Classification Report: \n","              precision    recall  f1-score   support\n","\n","           0       0.87      0.87      0.87      4503\n","           1       0.63      0.63      0.63      1530\n","\n","    accuracy                           0.81      6033\n","   macro avg       0.75      0.75      0.75      6033\n","weighted avg       0.81      0.81      0.81      6033\n","\n","\n","Model: Naive Bayes\n","Accuracy: 0.7984\n","Precision: 0.7099\n","Recall: 0.3471\n","F1-Score: 0.4662\n","Classification Report: \n","              precision    recall  f1-score   support\n","\n","           0       0.81      0.95      0.88      4503\n","           1       0.71      0.35      0.47      1530\n","\n","    accuracy                           0.80      6033\n","   macro avg       0.76      0.65      0.67      6033\n","weighted avg       0.79      0.80      0.77      6033\n","\n","\n","Model: SVM\n","Accuracy: 0.8472\n","Precision: 0.7709\n","Recall: 0.5654\n","F1-Score: 0.6523\n","Classification Report: \n","              precision    recall  f1-score   support\n","\n","           0       0.86      0.94      0.90      4503\n","           1       0.77      0.57      0.65      1530\n","\n","    accuracy                           0.85      6033\n","   macro avg       0.82      0.75      0.78      6033\n","weighted avg       0.84      0.85      0.84      6033\n","\n","\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.svm import SVC\n","from sklearn.metrics import classification_report, precision_score, recall_score, f1_score\n","\n","# Завантаження даних\n","data = pd.read_csv('income_data.txt', delimiter=',', header=None)\n","data.columns = ['age', 'workclass', 'fnlwgt', 'education', 'education-num', 'marital-status',\n","                'occupation', 'relationship', 'race', 'sex', 'capital-gain', 'capital-loss',\n","                'hours-per-week', 'native-country', 'income']\n","\n","# Очищення даних\n","data.replace(' ?', pd.NA, inplace=True)\n","data.dropna(inplace=True)  # Видалення рядків з пропущеними значеннями\n","\n","# Перетворення категоріальних змінних у числові\n","categorical_columns = ['workclass', 'education', 'marital-status', 'occupation', 'relationship',\n","                       'race', 'sex', 'native-country', 'income']\n","data[categorical_columns] = data[categorical_columns].apply(lambda col: LabelEncoder().fit_transform(col))\n","\n","# Вибір ознак та міток\n","X = data.drop('income', axis=1)\n","y = data['income']\n","\n","# Розділення на тренувальну та тестову вибірки\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Масштабування ознак\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.transform(X_test)\n","\n","# Список моделей для порівняння\n","models = {\n","    'Logistic Regression': LogisticRegression(),\n","    'LDA': LinearDiscriminantAnalysis(),\n","    'KNN': KNeighborsClassifier(),\n","    'CART': DecisionTreeClassifier(),\n","    'Naive Bayes': GaussianNB(),\n","    'SVM': SVC()\n","}\n","\n","# Оцінка кожної моделі\n","for name, model in models.items():\n","    model.fit(X_train, y_train)\n","    y_pred = model.predict(X_test)\n","\n","    print(f\"Model: {name}\")\n","    print(f\"Accuracy: {model.score(X_test, y_test):.4f}\")\n","\n","    # Обчислення precision, recall, f1-score\n","    precision = precision_score(y_test, y_pred, pos_label=1)  # Використовуємо числовий клас 1\n","    recall = recall_score(y_test, y_pred, pos_label=1)\n","    f1 = f1_score(y_test, y_pred, pos_label=1)\n","\n","    print(f\"Precision: {precision:.4f}\")\n","    print(f\"Recall: {recall:.4f}\")\n","    print(f\"F1-Score: {f1:.4f}\")\n","\n","    print(f\"Classification Report: \\n{classification_report(y_test, y_pred)}\\n\")\n"]}]}